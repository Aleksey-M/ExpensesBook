@page "/categories"

@using ExpensesBook.Model
@inject ExpensesData Data
@inject IJSRuntime JSRuntime

<h3>Категории расходов</h3>

<table class="table table-striped">
    <thead>
        <tr>
            <th>#</th>
            <th>Название</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var (cat, canBeDeleted) in AllCategories)
        {
            <tr>
                <td>@cat.Sort)</td>
                <td>
                    @if (selectedCategory?.Id == cat.Id)
                    {
                        <EditForm Model="selectedCategory" OnValidSubmit="UpdateCategory">

                            <DataAnnotationsValidator />
                            <ValidationSummary />

                            <div class="form-row">
                                <div class="col-lg-6 col-sm-12 mb-2">
                                    <InputText class="form-control" @bind-Value="selectedCategory.Name" />
                                </div>
                                <div class="col-lg-3 col-sm-12 mb-2">
                                    <button type="submit" class="btn btn-sm btn-success" title="Сохранить"><span class="oi oi-check" aria-hidden="true"></span></button>
                                    <button @onclick="DeleteCategory" class="btn btn-sm btn-danger" title="Удалить" disabled="@canBeDeleted"><span class="oi oi-trash" aria-hidden="true"></span></button>
                                    <button @onclick="CancelEdit" class="btn btn-sm btn-secondary" title="Закрыть"><span class="oi oi-x" aria-hidden="true"></span></button>
                                </div>
                            </div>
                        </EditForm>
                    }
                    else
                    {
                        @cat.Name
                        <button @onclick="@(_ => EditCategory(cat))" style="float:right" class="btn btn-sm btn-secondary" title="Редактировать"><span class="oi oi-pencil" aria-hidden="true"></span></button>
                    }
                </td>
            </tr>
        }
    </tbody>
    <tfoot>
        <tr>
            <td colspan="3">
                <EditForm Model="newCategory" OnValidSubmit="AddNewCategory">

                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="form-row">
                        <div class="col-lg-6 col-sm-12 mb-2">
                            <InputText class="form-control" @bind-Value="newCategory.Name" />
                        </div>
                        <div class="col-lg-2 col-sm-12 mb-2">
                            <button type="submit" class="btn btn-success">Добавить</button>
                        </div>
                    </div>
                </EditForm>
            </td>
        </tr>
    </tfoot>
</table>

@code {

    private ExpensesCategoryEdit newCategory = new ExpensesCategoryEdit();
    private ExpensesCategoryEdit selectedCategory = null;

    private async Task AddNewCategory()
    {
        if (Data.AddCategory(newCategory.Name))
        {
            newCategory.Name = string.Empty;
            await JSRuntime.InvokeVoidAsync("setUnsaved");
        }
    }

    private async Task DeleteCategory()
    {
        if (selectedCategory == null) return;

        bool confirmed = await JSRuntime.InvokeAsync<bool>("window.confirm", "Удалить категорию?");
        if (!confirmed) return;

        if (Data.DeleteCategory(selectedCategory.Id.Value))
        {
            selectedCategory = null;
            await JSRuntime.InvokeVoidAsync("setUnsaved");
        }
    }

    private async Task UpdateCategory()
    {
        if (selectedCategory == null) return;
        if (Data.UpdateCategoryName(selectedCategory.Id.Value, selectedCategory.Name))
        {
            selectedCategory = null;
            await JSRuntime.InvokeVoidAsync("setUnsaved");
        }
    }

    private void CancelEdit()
    {
        selectedCategory = null;
    }

    private void EditCategory(ExpensesCategory category)
    {
        selectedCategory = new ExpensesCategoryEdit
        {
            Id = category.Id,
            Name = category.Name
        };
    }

    private IEnumerable<(ExpensesCategory category, bool canBeDeleted)> AllCategories =>
        Data.Categories
        .OrderBy(c => c.Sort)
        .Select(c => (c, Data.Expenses.Any(i => i.CategoryId == c.Id)))
        .ToList();

}
