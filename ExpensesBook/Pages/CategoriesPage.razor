@page "/categoriespage"

@using ExpensesBook.Domain.Services
@using ExpensesBook.Domain.Entities
@using System.Collections.Generic
@inject ICategoriesService CategoriesService
@inject IJSRuntime JSRuntime

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-8">

    <MudCard>
        <MudCardContent>

            <MudTable Items="Categories" Breakpoint="Breakpoint.None" Striped="true" FixedHeader="true">
                <ToolBarContent>
                    <MudText Typo="Typo.h5" GutterBottom="true">Категории расходов</MudText>
                    <MudToolBarSpacer />
                    <MudButton Variant="Variant.Filled" OnClick="_ => OpenAddNewCategoryPopup()" Color="Color.Default" StartIcon="@Icons.Material.Filled.AddCircle" Class="mt-0">Добавить</MudButton>
                </ToolBarContent>

                <HeaderContent>
                    <MudTh>#</MudTh>
                    <MudTh>Название</MudTh>
                    <MudTh></MudTh>
                </HeaderContent>

                <RowTemplate>
                    <MudTd>@context.Sort</MudTd>
                    <MudTd>@context.Name</MudTd>
                    <MudTh Style="text-align:right">
                        <MudIconButton Icon="@Icons.Material.Filled.Edit" OnClick="_ => OpenEditCategoryPopup(context)"></MudIconButton>
                        <MudIconButton Icon="@Icons.Material.Filled.DeleteForever" Color="Color.Error" Class="ml-2" OnClick="async _ => await DeleteCategory(context.Id)"></MudIconButton>
                    </MudTh>
                </RowTemplate>
            </MudTable>
        </MudCardContent>
    </MudCard>

    <div style="display: block; position: absolute; bottom: 0; left: 0;">
        <MudPopover Open="@(_state == PageState.Edit || _state == PageState.Add)" Class="pa-4" Style="width: 80%; margin: 0 auto; position: fixed; left: 10%; top: 15%;">
            <EditForm Model="@_category" OnValidSubmit="async _ => await SaveCategory()">
                <DataAnnotationsValidator />
                <MudCard>
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6" Color="Color.Info">Добавление категории</MudText>
                        </CardHeaderContent>
                        <CardHeaderActions>
                            <MudIconButton Class="ml-auto mb-1" OnClick="_ => _state = PageState.List" Icon="@Icons.Material.Filled.Close"></MudIconButton>
                        </CardHeaderActions>
                    </MudCardHeader>

                    <MudCardContent>
                        <MudGrid>
                            <MudItem xs="12" sm="4">
                                <MudTextField Label="Сортировка" InputType="InputType.Number" @bind-Value="_category.Sort" For="@(() => _category.Sort)" />
                            </MudItem>

                            <MudItem xs="12" sm="8">
                                <MudTextField Label="Название" @bind-Value="_category.Name" For="@(() => _category.Name)" />
                            </MudItem>
                        </MudGrid>

                    </MudCardContent>

                    <MudCardActions>
                        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">@_state.SaveActionName()</MudButton>
                    </MudCardActions>
                </MudCard>
            </EditForm>
        </MudPopover>
    </div>

</MudContainer>

@code {

    private CategoryDto _category = new CategoryDto();
    private PageState _state = PageState.List;

    private void OpenAddNewCategoryPopup()
    {
        _category = new CategoryDto() { Id = Guid.Empty, Sort = Categories is { Count: > 0 } ? Categories.Max(c => c.Sort) + 1 : 1};
        _state = PageState.Add;
    }

    private void OpenEditCategoryPopup(Category category)
    {
        _category = new CategoryDto
        {
            Id = category.Id,
            Name = category.Name,
            Sort = category.Sort
        };

        _state = PageState.Edit;
    }

    private async Task SaveCategory()
    {
        if (_category is null) return;

        if(_category.Id == Guid.Empty)
        {
            await CategoriesService.AddCategory(categoryName: _category.GetName(), sortOrder: _category.GetSort());
        }
        else
        {
            await CategoriesService.UpdateCategory(categoryId: _category.GetId(), categoryName: _category.GetName(), sortOrder: _category.GetSort());
        }

        Categories = await CategoriesService.GetCategories();
        _state = PageState.List;
    }

    private async Task DeleteCategory(Guid categoryId)
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("window.confirm", "Удалить категорию?");
        if (!confirmed) return;

        bool canBeDeleted = await CategoriesService.IsEmptyCategory(categoryId);
        if (!canBeDeleted)
        {
            await JSRuntime.InvokeAsync<bool>("window.confirm", "Существуют расходы в этой категории. Нельзя удалить.");
            return;
        }

        await CategoriesService.DeleteCategory(categoryId);

        Categories = await CategoriesService.GetCategories();
    }

    private List<Category> Categories { get; set; } = new List<Category>();

    protected override async Task OnInitializedAsync()
    {
        Categories = await CategoriesService.GetCategories();
    }

}
