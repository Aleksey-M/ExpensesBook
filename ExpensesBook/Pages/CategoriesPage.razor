@page "/categoriespage"

@using ExpensesBook.Domain.Services
@using ExpensesBook.Domain.Entities
@using System.Collections.Generic
@inject ICategoriesService CategoriesService
@inject IJSRuntime JSRuntime

<h3>Категории расходов</h3>

<table class="table table-striped">
    <thead>
        <tr>
            <th>#</th>
            <th>Название</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var cat in Categories)
        {
        <tr>
            @if (_selectedCategory?.Id == cat.Id)
            {
                <td colspan="2">
                    <EditForm Model="_selectedCategory" OnValidSubmit="UpdateCategory">

                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="form-row">
                            <div class="col-lg-2 col-sm-12 mb-2">
                                <InputNumber class="form-control" @bind-Value="_selectedCategory.Sort" />
                            </div>
                            <div class="col-lg-6 col-sm-12 mb-2">
                                <InputText class="form-control" @bind-Value="_selectedCategory.Name" />
                            </div>
                            <div class="col-lg-3 col-sm-12 mb-2">
                                <button type="submit" class="btn btn-sm btn-success" title="Сохранить"><span class="oi oi-check" aria-hidden="true"></span></button>
                                <button @onclick="DeleteCategory" class="btn btn-sm btn-danger" title="Удалить"><span class="oi oi-trash" aria-hidden="true"></span></button>
                                <button @onclick="CancelEdit" class="btn btn-sm btn-secondary" title="Закрыть"><span class="oi oi-x" aria-hidden="true"></span></button>
                            </div>
                        </div>
                    </EditForm>
                </td>
            }
            else
            {
                <td>@cat.Sort</td>
                <td>
                    @cat.Name
                    <button @onclick="@(_ => EditCategory(cat))" style="float:right" class="btn btn-sm btn-secondary" title="Редактировать"><span class="oi oi-pencil" aria-hidden="true"></span></button>
                </td>
            }
        </tr>
        }
    </tbody>
    <tfoot>
        <tr>
            <td colspan="2">
                <EditForm Model="_newCategory" OnValidSubmit="AddNewCategory">

                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="form-row">
                        <div class="col-lg-2 col-sm-12 mb-2">
                            <InputNumber class="form-control" @bind-Value="_newCategory.Sort" />
                        </div>
                        <div class="col-lg-6 col-sm-12 mb-2">
                            <InputText class="form-control" @bind-Value="_newCategory.Name" />
                        </div>
                        <div class="col-lg-2 col-sm-12 mb-2">
                            <button type="submit" class="btn btn-success">Добавить</button>
                        </div>
                    </div>
                </EditForm>
            </td>
        </tr>
    </tfoot>
</table>

@code {

    private CategoryDto _newCategory = new CategoryDto();
    private CategoryDto? _selectedCategory = null;

    private async Task AddNewCategory()
    {
        await CategoriesService.AddCategory(categoryName: _newCategory.Name ?? "", sortOrder: _newCategory.Sort);

        Categories = await CategoriesService.GetCategories();
        _newCategory = new CategoryDto();
    }

    private async Task DeleteCategory()
    {
        if (_selectedCategory == null) return;
        var categoryId = _selectedCategory.Id ?? Guid.Empty;

        bool confirmed = await JSRuntime.InvokeAsync<bool>("window.confirm", "Удалить категорию?");
        if (!confirmed) return;

        bool canBeDeleted = await CategoriesService.IsEmptyCategory(categoryId);
        if (!canBeDeleted)
        {
            await JSRuntime.InvokeAsync<bool>("window.confirm", "Существуют расходы в этой категории. Нельзя удалить.");
            return;
        }

        await CategoriesService.DeleteCategory(categoryId);

        Categories = await CategoriesService.GetCategories();
        _selectedCategory = null;
    }

    private async Task UpdateCategory()
    {
        if (_selectedCategory == null) return;

        await CategoriesService.UpdateCategory(categoryId: _selectedCategory.Id ?? Guid.Empty, categoryName: _selectedCategory.Name, sortOrder: _selectedCategory.Sort);

        Categories = await CategoriesService.GetCategories();
        _selectedCategory = null;
    }

    private void CancelEdit()
    {
        _selectedCategory = null;
    }

    private void EditCategory(Category category)
    {
        _selectedCategory = new CategoryDto
        {
            Id = category.Id,
            Name = category.Name,
            Sort = category.Sort
        };
    }

    private List<Category> Categories { get; set; } = new List<Category>();

    protected override async Task OnInitializedAsync()
    {
        Categories = await CategoriesService.GetCategories();
    }

}
