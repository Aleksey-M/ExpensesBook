@page "/savingspage"

@using ExpensesBook.Domain.Calculators

@inject CashBalanceCalculator BalanceCalculator
@inject IJSRuntime JSRuntime

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4 mb-4">
    <MudCard>
        <MudCardContent>
            <MudText Typo="Typo.h5" GutterBottom="true">Денежный баланс (помесячно)</MudText>

            @if (_rows is { Count: 0 })
            {
                <MudButton
                    Class="mt-3"
                    Variant="Variant.Filled"
                    Color="Color.Success"
                    StartIcon="@Icons.Material.Filled.MonetizationOn"
                    OnClick="async _ => await ShowMonthlyBalance()">
                        Показать
                </MudButton>
            }
            else
            {
                <MudTable Items="_rows" Breakpoint="Breakpoint.None" Striped="true" FixedHeader="true">
                    <HeaderContent>
                        <MudTh>Месяц</MudTh>
                        <MudTh>Доходы</MudTh>
                        <MudTh>Расходы</MudTh>
                        <MudTh>Сбережения</MudTh>
                    </HeaderContent>

                    <RowTemplate>
                        <MudTd>@context.PeriodName</MudTd>
                        <MudTd style="color:darkblue">@context.Incomes</MudTd>
                        <MudTd style="color:darkred">@context.Expenses</MudTd>
                        <MudTd style="@context.SavingsCSSStyle">
                            @context.Savings <small><i>@context.SavingsPercent</i></small>
                        </MudTd>
                    </RowTemplate>
                </MudTable>

                <MudPaper Class="mt-3 mb-3">
                        <MudChart
                            ChartOptions="Options"
                            ChartType="ChartType.Line"
                            ChartSeries="@Series"
                            XAxisLabels="@XAxisLabels"
                            Width="100%"
                            Height="370px"
                            Style="margin-left:25px">
                        </MudChart>
                </MudPaper>
            }

        </MudCardContent>
    </MudCard>

    <MudCard Class="mt-5">
        <MudCardContent>
            <MudText Typo="Typo.h5" GutterBottom="true">Денежный баланс (произвольный период)</MudText>

            <MudGrid>
                <MudItem xs="12" sm="4" md="3">
                    <MudDatePicker Label="Начало" @bind-Date="_from" />
                </MudItem>

                <MudItem xs="12" sm="4" md="3">
                    <MudDatePicker Label="Конец" @bind-Date="_to" />
                </MudItem>

                <MudItem xs="12" sm="4" md="2">
                    <MudButton
                        Variant="Variant.Filled"
                        Class="mt-2"
                        Color="Color.Success"
                        StartIcon="@Icons.Material.Filled.MonetizationOn"
                        OnClick="async _ => await ShowBalance()">
                            Показать
                    </MudButton>
                </MudItem>
            </MudGrid>
        </MudCardContent>
    </MudCard>

    @if (_singleRowForPeriod is { Count: > 0 })
    {
        <MudCard Class="mt-5">
            <MudCardContent>
                <MudTable Items="_singleRowForPeriod" Breakpoint="Breakpoint.Xs">
                    <HeaderContent>
                        <MudTh>Доходы</MudTh>
                        <MudTh>Расходы</MudTh>
                        <MudTh>Сбережения</MudTh>
                    </HeaderContent>

                    <RowTemplate>
                        <MudTd DataLabel="Доходы" style="color:darkblue">@context.Incomes</MudTd>
                        <MudTd DataLabel="Расходы" style="color:darkred">@context.Expenses</MudTd>
                        <MudTd DataLabel="Сбережения" style="@context.SavingsCSSStyle">
                            @context.Savings <small><i>@context.SavingsPercent</i></small>
                        </MudTd>
                    </RowTemplate>
                </MudTable>
            </MudCardContent>
        </MudCard>

        @if (_displayChart) 
        {
            <MudPaper Class="pa-4 mt-3">
                <MudChart ChartType="ChartType.Pie" InputData="@_data" InputLabels="@_labels" Width="300px" Height="300px" />
            </MudPaper>
        }
     }
</MudContainer>

@code
{

    private List<CashBalance> _rows = new();
    private List<CashBalance> _singleRowForPeriod = new();

    private DateTime? _from = DateTime.Now.Date;
    private DateTime? _to = DateTime.Now.Date;

    private double[] _data = Array.Empty<double>();
    private string[] _labels = new string[] { "Расходы", "Сбережения" };
    private bool _displayChart = false;

    private async Task ShowBalance()
    {
        if (_from?.Date > _to?.Date)
        {
            await JSRuntime.InvokeVoidAsync("alert", "Начальная дата периода не может быть больше конечной");
            return;
        }

        var forSelectedPeriod = await BalanceCalculator.GetCashBalance(
            new DateTimeOffset(_from ?? DateTime.Now),
            new DateTimeOffset(_to ?? DateTime.Now));

        _singleRowForPeriod = new List<CashBalance> { forSelectedPeriod };

        _data = new double[] 
        { 
            _singleRowForPeriod[0].ExpensesNum,
            _singleRowForPeriod[0].SavingsNum <= 0 ? 0 : _singleRowForPeriod[0].SavingsNum
        };

        _displayChart = !(_singleRowForPeriod[0].ExpensesNum == 0 && _singleRowForPeriod[0].SavingsNum == 0);
    }

    private List<ChartSeries> Series = new();
    private string[] XAxisLabels = Array.Empty<string>();
    private ChartOptions Options = new ChartOptions { YAxisTicks = 10000 };

    private async Task ShowMonthlyBalance()
    {
        CashBalance? total = null;
        (_rows, total) = await BalanceCalculator.GetMonthlyCashBalance();

        if(total is null)
        {
            await JSRuntime.InvokeVoidAsync("alert", "Нет данных для отображения");
        }
        else
        {
            XAxisLabels = _rows.Select(r => r.StartPeriodMonth).ToArray();

            Series = new List<ChartSeries>
            {
                new ChartSeries
                {
                    Name = "Доходы",
                    Data = _rows.Select(r => r.IncomesNum).ToArray()
                },
                new ChartSeries
                {
                    Name = "Расходы",
                    Data = _rows.Select(r => r.ExpensesNum).ToArray()
                },
                new ChartSeries
                {
                    Name = "Сбережения",
                    Data = _rows.Select(r => r.SavingsNum >= 0 ? r.SavingsNum : 0).ToArray()
                }
            };

            double totalSavings = 0;
            var data = new List<double>();

            foreach(var r in _rows)
            {
                totalSavings += r.SavingsNum;

                if (totalSavings < 0) totalSavings = 0;

                data.Add(totalSavings);
            }

            Series.Add(new ChartSeries { Name = "Общие сбережения", Data = data.ToArray() });

            Options.YAxisTicks = data.Max() switch
            {
                0 => 10,
                < 1000 => 200,
                < 50_000 => 10_000,
                < 100_000 => 20_000,
                < 1_000_000 => 200_000,
                _ => 20
            };

            _rows.Add(total);
        }
    }
}
