@page "/savings"

@using ExpensesBook.Model
@inject ExpensesData Data
@inject Calculator Calc
@inject IJSRuntime JSRuntime

<h3>Сбережения</h3>

<table class="table table-striped">
    <thead>
        <tr>
            <th>Месяц</th>
            <th>Доходы</th>
            <th>Описание</th>
            <th>Расходы</th>
            <th>Сбережения</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var sav in Saving.Savings)
        {
            if (sav.saving.Id.ToString() != selectedSaving?.Id)
            {
            <tr>
                <td>@sav.saving.DisplayDate</td>
                <td style="color:darkblue">@sav.saving.Income.ToString("N2")</td>
                <td>@sav.saving.Description</td>
                <td style="color:darkred">@sav.expenses</td>
                <td style="@sav.color">@sav.totalSaving</td>
                <td><button @onclick="@(_ => EditSaving(sav.saving))" style="float:right" class="btn btn-sm btn-secondary" title="Редактировать"><span class="oi oi-pencil" aria-hidden="true"></span></button></td>               
            </tr>
            }
            else
            {
                <tr>
                    <td colspan="6">
                        <EditForm Model="selectedSaving" OnValidSubmit="UpdateSaving">

                            <DataAnnotationsValidator />
                            <ValidationSummary />

                            <div class="form-row">
                                <div class="col-lg-2 col-sm-4 mb-2">
                                    <InputNumber class="form-control" title="Год" @bind-Value="selectedSaving.Year" />
                                </div>
                                <div class="col-lg-2 col-sm-4 mb-2">
                                    <InputNumber class="form-control" title="Месяц" @bind-Value="selectedSaving.Month" />
                                </div>
                                <div class="col-lg-2 col-sm-4 mb-2">
                                    <InputNumber step="0.01" title="Доход" class="form-control" @bind-Value="selectedSaving.Income" />
                                </div>
                                <div class="col-lg-4 col-sm-12 mb-2">
                                    <InputText class="form-control" @bind-Value="selectedSaving.Description" />
                                </div>
                                <div class="col-lg-2 col-sm-12 mb-2">
                                    <div style="float:right">
                                        <button type="submit" class="btn btn-sm btn-success" title="Сохранить"><span class="oi oi-check" aria-hidden="true"></span></button>
                                        <button @onclick="DeleteSaving" class="btn btn-sm btn-danger" title="Удалить"><span class="oi oi-trash" aria-hidden="true"></span></button>
                                        <button @onclick="CancelEdit" class="btn btn-sm btn-secondary" title="Закрыть"><span class="oi oi-x" aria-hidden="true"></span></button>
                                    </div>
                                </div>
                            </div>
                        </EditForm>
                    </td>
                </tr>
            }
        }
    </tbody>
    <tfoot>
        <tr>
            <th>Всего:</th>
            <th style="color:darkblue">@Saving.TotalIncome</th>
            <th></th>
            <th style="color:darkred">@Saving.TotalExpenses</th>
            <th style="@Saving.TotalSavingsStyle">@Saving.TotalSavings</th>
            <th></th>
        </tr>
        <tr>
            <td colspan="6">
                <EditForm Model="newSaving" OnValidSubmit="AddNewSavings">

                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="form-row">
                        <div class="col-lg-2 col-sm-4 mb-2">
                            <InputNumber class="form-control" title="Год" @bind-Value="newSaving.Year" />
                        </div>
                        <div class="col-lg-2 col-sm-4 mb-2">
                            <InputNumber class="form-control" title="Месяц" @bind-Value="newSaving.Month" />
                        </div>
                        <div class="col-lg-2 col-sm-4 mb-2">
                            <InputNumber step="0.01" title="Доход" class="form-control" @bind-Value="newSaving.Income" />
                        </div>
                        <div class="col-lg-4 col-sm-12 mb-2">
                            <InputText class="form-control" @bind-Value="newSaving.Description" />
                        </div>
                        <div class="col-lg-2 col-sm-12 mb-2">
                            <button type="submit" class="btn btn-success">Добавить</button>
                        </div>
                    </div>
                </EditForm>
            </td>
        </tr>
    </tfoot>
</table>

@code {
    private SavingsDto newSaving = new SavingsDto
    {
        Year = DateTimeOffset.Now.Year,
        Month = DateTimeOffset.Now.Month,
        Income = 20000
    };

    private SavingsDto selectedSaving = null;
    private SavingsCalculated Saving => Calc.GetSavingsForMonths();

    private async Task AddNewSavings()
    {
        var s = Data.Savings.SingleOrDefault(sav => sav.Year == newSaving.Year && sav.Month == newSaving.Month);
        if (s != null)
        {
            await JSRuntime.InvokeVoidAsync("window.alert", $"Запись для '{s.DisplayDate}' уже есть");
            return;
        }

        if (Data.AddSaving(newSaving))
        {
            newSaving.Description = string.Empty;
            newSaving.Year = DateTimeOffset.Now.Year;
            newSaving.Month = 1;
            newSaving.Income = 20000;

            await JSRuntime.InvokeVoidAsync("setUnsaved");
        }
    }

    private void EditSaving(SavingsItem s)
    {
        selectedSaving = new SavingsDto
        {
            Id = s.Id.ToString(),
            Description = s.Description,
            Year = s.Year,
            Month = s.Month,
            Income = s.Income
        };
    }

    private async Task UpdateSaving()
    {
        if (selectedSaving == null) return;
        var s = Data.Savings.SingleOrDefault(sav => sav.Year == selectedSaving.Year && sav.Month == selectedSaving.Month && sav.Id.ToString() != selectedSaving.Id);
        if (s != null)
        {
            await JSRuntime.InvokeVoidAsync("window.alert", $"Запись для '{s.DisplayDate}' уже есть");
            return;
        }

        if (Data.UpdateSaving(selectedSaving))
        {
            selectedSaving = null;
            await JSRuntime.InvokeVoidAsync("setUnsaved");
        }
    }

    public async Task DeleteSaving()
    {
        if (selectedSaving == null) return;

        bool confirmed = await JSRuntime.InvokeAsync<bool>("window.confirm", "Удалить запись?");
        if (!confirmed) return;

        if (Data.DeleteSaving(selectedSaving.Id))
        {
            selectedSaving = null;
            await JSRuntime.InvokeVoidAsync("setUnsaved");
        }
    }

    private void CancelEdit()
    {
        selectedSaving = null;
    }

}
