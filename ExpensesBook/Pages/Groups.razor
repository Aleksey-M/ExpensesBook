@page "/groups"

@using ExpensesBook.Model
@inject ExpensesData ExpensesData
@inject IJSRuntime JSRuntime 

<h3>Группы расходов</h3>

<table class="table table-striped">
    <thead>
        <tr>
            <th>#</th>
            <th>Название</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var group in ExpensesData.Groups.OrderBy(g => g.Sort))
        {
            <tr>
                <td>@group.Sort)</td>
                <td>
                    @if (selectedGroup?.Id == group.Id)
                    {
                        <div class="form-inline">
                            <EditForm Model="selectedGroup" OnValidSubmit="UpdateGroup">

                                <DataAnnotationsValidator />
                                <ValidationSummary />

                                <InputText class="form-control" @bind-Value="selectedGroup.Name" />

                                <button type="submit" class="btn btn-sm btn-success" title="Сохранить"><span class="oi oi-check" aria-hidden="true"></span></button>
                            </EditForm>
                            &nbsp;<button @onclick="DeleteGroup" class="btn btn-sm btn-danger" title="Удалить"><span class="oi oi-trash" aria-hidden="true"></span></button>
                            &nbsp;<button @onclick="CancelEdit" class="btn btn-sm btn-secondary" title="Закрыть"><span class="oi oi-x" aria-hidden="true"></span></button>
                        </div>
                    }
                    else
                    {
                        @group.Name
                        <button @onclick="@(_ => EditGroup(group))" style="float:right" class="btn btn-sm btn-secondary" title="Редактировать"><span class="oi oi-pencil" aria-hidden="true"></span></button>
                    }
                </td>
            </tr>
        }
    </tbody>
    <tfoot>
        <tr>
            <td colspan="3">
                <EditForm Model="newGroup" OnValidSubmit="AddNewGroup">

                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="form-inline">
                        <InputText class="form-control" @bind-Value="newGroup.Name" />
                        &nbsp;&nbsp;
                        <button type="submit" class="btn btn-success">Добавить</button>
                    </div>
                </EditForm>
            </td>
        </tr>
    </tfoot>
</table>

@code {
    private ExpensesGroupEdit newGroup = new ExpensesGroupEdit();
    private ExpensesGroupEdit selectedGroup = null;

    private async Task AddNewGroup()
    {
        if (ExpensesData.AddGroup(newGroup.Name))
        {
            newGroup.Name = string.Empty;
            await JSRuntime.InvokeVoidAsync("setUnsaved");
        }
    }

    private async Task DeleteGroup()
    {
        if (selectedGroup == null) return;
        if (ExpensesData.DeleteGroup(selectedGroup.Id.Value))
        {
            selectedGroup = null;
            await JSRuntime.InvokeVoidAsync("setUnsaved");
        }
    }

    private async Task UpdateGroup()
    {
        if (selectedGroup == null) return;
        if (ExpensesData.UpdateGroupName(selectedGroup.Id.Value, selectedGroup.Name))
        {
            selectedGroup = null;
            await JSRuntime.InvokeVoidAsync("setUnsaved");
        }
    }

    private void CancelEdit()
    {
        selectedGroup = null;
    }

    private void EditGroup(ExpensesGroup group)
    {
        selectedGroup = new ExpensesGroupEdit
        {
            Id = group.Id,
            Name = group.Name
        };
    }
}
