@page "/"

@using ExpensesBook.Domain.Calculators
@using ExpensesBook.Domain.Entities
@using System.Collections.Generic
@inject PeriodExpenseCalculator Calc

<h3>Книга расходов</h3>
<hr />
<div class="form-row">
    <div class="col-sm-6 col-lg-3 mb-2">
        <input type="date" id="startDate" class="form-control" @bind-value="_startDate" />
    </div>
    <div class="col-lg-3 col-sm-6 mb-2">
        <input type="date" id="endDate" class="form-control" @bind-value="_endDate" />
    </div>
    <div class="col-lg-4 col-sm-9 mb-2">
        <select id="viewType" class="form-control" @bind="_viewType">
            <option selected value="@ExpensesGroupingType.None">Без группировки</option>
            <option value="@ExpensesGroupingType.ByDate">По дате</option>
            <option value="@ExpensesGroupingType.ByGroup">По группе</option>
            <option value="@ExpensesGroupingType.ByCategory">По категории</option>
        </select>
    </div>
    <div class="col-lg-2 col-sm-3 mb-2">
        <button type="button" class="btn btn-info" style="float:right" @onclick="ShowTable">Показать</button>
    </div>
</div>

<br />

<div class="row" style="word-wrap: break-word">
    <div class="col-12">

    @if (RecordsNotFound)
    {
        <h4 style="color:darkorange">Нет записей для указанного диапазона дат</h4>
    }
    else
    {       
        <table class="table table-striped table-sm">
            <thead>
                <tr>
                    <th>@_headers.Item1</th>
                    <th>@_headers.Item2</th>
                    <th>@_headers.Item3</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in _actualDataSet)
                {
                    @if (_detailsListAvailable && _groupingCriteriaName == item.Item1)
                    {
                        <tr>
                            <td colspan="3">
                                <h5 style="color:navy"><i>@item.Item1 (@item.Item2 грн)</i></h5>
                                <table>
                                    <thead>
                                        <tr>
                                            <th>Дата</th>
                                            <th>Описание</th>
                                            <th>Потрачено</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var expandedItem in _expandedSublist)
                                        {
                                            <tr>
                                                <td>@expandedItem.Date.ToString("yyyy.MM.dd")</td>
                                                <td>@expandedItem.Description</td>
                                                <td>@expandedItem.Amounth.ToString("N2")</td>
                                            </tr>
                                        }
                                    </tbody>
                                    <tfoot>
                                        <tr>
                                            <th colspan="3">
                                                <button type="button" class="btn btn-link" @onclick="_ => _groupingCriteriaName = null">Свернуть</button>
                                            </th>
                                        </tr>
                                    </tfoot>
                                </table>
                            </td>
                        </tr>
                    }
                    else
                    {
                        <tr>
                            <td>
                                @if (_detailsListAvailable)
                                {
                                    <button @onclick="async _ => await ShowDetails(item.Item1, item.Item4)" type="button" class="btn btn-link">@item.Item1</button>
                                }
                                else
                                {
                                    @item.Item1
                                }
                            </td>
                            <td>@item.Item2</td>
                            <td>@item.Item3</td>
                        </tr>
                    }
                }
            </tbody>
            <tfoot>
                <tr>
                    <th colspan="3">
                        Всего: @_total
                    </th>
                </tr>
            </tfoot>
         </table>
    }
    </div>
</div>


@code {
    private DateTimeOffset _startDate = DateTimeOffset.Now.Date.AddDays(-14);
    private DateTimeOffset _endDate = DateTimeOffset.Now.Date.AddDays(1);
    private ExpensesGroupingType _viewType;

    private string _total = "0";
    private bool RecordsNotFound => _actualDataSet.Count == 0;

    private (string, string, string) _headers;
    private List<(string, string, string, Guid?)> _actualDataSet = new List<(string, string, string, Guid?)>();

    private async Task ShowTable()
    {
        _headers = Calc.GetTableHeaders(_viewType);

        (_actualDataSet, _total) = await Calc.GetExpensesAsTable(_viewType, _startDate.Date, _endDate.Date, null);

        _detailsListAvailable = _viewType != ExpensesGroupingType.None;
        _groupingCriteriaName = null;
    }

    private List<Expense> _expandedSublist = new List<Expense>();
    private string? _groupingCriteriaName;
    private bool _detailsListAvailable = false;

    private async Task ShowDetails(string groupingCriteriaName, Guid? filterBy)
    {
        _groupingCriteriaName = groupingCriteriaName;

        _expandedSublist = (_viewType) switch
        {
            ExpensesGroupingType.ByDate => await Calc.GetFilteredExpenses(_viewType, DateTimeOffset.Parse(groupingCriteriaName), DateTimeOffset.Parse(groupingCriteriaName), filterBy),
            ExpensesGroupingType.ByGroup => await Calc.GetFilteredExpenses(_viewType, _startDate.Date, _endDate.Date, filterBy),
            ExpensesGroupingType.ByCategory => await Calc.GetFilteredExpenses(_viewType, _startDate.Date, _endDate.Date, filterBy),
            _ => new List<Expense>()
        };
    }
}
