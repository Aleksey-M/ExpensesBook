@page "/expensesfile"

@using ExpensesBook.Model

@inject ExpensesData ExpensesData
@inject IJSRuntime JSRuntime

<h4>Сохранить данные в файл</h4>

<button @onclick="SaveToFile" class="btn btn-lg btn-success"><span class="oi oi-cloud-download" aria-hidden="true"></span> Сохранить</button>
<hr />

<h4>Загрузить данные из файла</h4>
<h6 class="text-danger">(текущие несохраненные данные будут перезаписаны)</h6>
<div>
    <InputFile OnChange="UploadDataFile" accept=".json" />
    <p style="color: green; margin-top:5px;">@message</p>
</div>


@code {

    private string message = "";

    private async Task SaveToFile()
    {
        var str = ExpensesData.SerializeToJson();
        await JSRuntime.InvokeAsync<object>("fileSaveAs", "ExpensesData.json", str);
        await JSRuntime.InvokeVoidAsync("setSaved");
        ExpensesData.IsDataUpdated = false;
    }

    private async Task UploadDataFile(InputFileChangeEventArgs e)
    {
        bool saved = await JSRuntime.InvokeAsync<bool>("getSavedValue");
        if (!saved)
        {
            bool confirmed = await JSRuntime.InvokeAsync<bool>("window.confirm", "Загрузка перезапишет несохраненные изменения. Продолжить?");
            if (!confirmed) return;
        }

        message = $@"Загрузка файла {e.File.Name}";

        var stream = e.File.OpenReadStream();
        using var reader = new StreamReader(stream);
        var text = await reader.ReadToEndAsync();

        message = "Чтение данных";

        ExpensesData.DeserializeAndUpdateFromJson(text);

        message = "Файл загружен";
        await JSRuntime.InvokeVoidAsync("setSaved");
    }
}
