@page "/expensesfile"

@using ExpensesBook.Model

@inject ExpensesData ExpensesData
@inject IJSRuntime JSRuntime

<div id="expensesFileForm">

    <h4>Сохранить данные в файл</h4>

    <button @onclick="SaveToFile" class="btn btn-lg btn-success"><span class="oi oi-cloud-download" aria-hidden="true"></span> Сохранить</button>
    <hr />

    @*<h4>Загрузить данные из файла</h4>
        <h6 class="text-danger">(текущие несохраненные данные будут перезаписаны)</h6>
        <div>
            <InputFile OnChange="UploadDataFile" accept=".json" />
            <p style="color: green; margin-top:5px;">@message</p>
        </div>*@

    <h4>Загрузить данные из файла</h4>
    <h6 class="text-danger">(текущие несохраненные данные будут перезаписаны)</h6>
    <div>
        <label for="sFile" class="btn btn-lg btn-warning"><span class="oi oi-cloud-upload" aria-hidden="true"></span> Загрузить</label>
        <input type="file" accept=".json" id="sFile" style="visibility:hidden;" onchange="uploadFileJS(this)" />
        <p style="color: green; margin-top:5px;">@message</p>
    </div>
    <input type="hidden" id="tempField" @onchange="@(async e => await ParseJson(e))" />
</div>
@code {

    private string message = "";

    private async Task SaveToFile()
    {
        var str = ExpensesData.SerializeToJson();
        var fileName = "Exp-" + DateTime.Now.ToString("yyyy.MM.dd_hh.mm") + ".json";
        await JSRuntime.InvokeAsync<object>("fileSaveAs", fileName, str);
        await JSRuntime.InvokeVoidAsync("setSaved");
        ExpensesData.IsDataUpdated = false;
    }

    private async Task UploadDataFile(InputFileChangeEventArgs e)
    {
        bool saved = await JSRuntime.InvokeAsync<bool>("getSavedValue");
        if (!saved)
        {
            bool confirmed = await JSRuntime.InvokeAsync<bool>("window.confirm", "Загрузка перезапишет несохраненные изменения. Продолжить?");
            if (!confirmed) return;
        }

        var stream = e.File.OpenReadStream();
        using var reader = new StreamReader(stream);
        var text = await reader.ReadToEndAsync();

        ExpensesData.DeserializeAndUpdateFromJson(text);

        message = "Файл загружен";
        await JSRuntime.InvokeVoidAsync("setSaved");
    }

    private async Task ParseJson(ChangeEventArgs e)
    {
        var text = e.Value.ToString();
        ExpensesData.DeserializeAndUpdateFromJson(text);

        message = "Файл загружен";
        await JSRuntime.InvokeVoidAsync("setSaved");
    }
}
