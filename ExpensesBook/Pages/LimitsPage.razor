@page "/limitspage"

@using ExpensesBook.Domain.Calculators
@using ExpensesBook.Domain.Entities
@using ExpensesBook.Domain.Services
@using System.Collections.Generic
@inject LimitsCalculator LimitsCalc
@inject ILimitsService LimitsSvc
@inject IJSRuntime JSRuntime

<h3>Лимиты</h3>

<table class="table table-striped">
    <thead>
        <tr>
            <th>Период</th>
            <th>Описание</th>
            <th>Лимит</th>
            <th>Расходы</th>
            <th>Остаток</th>
            <th>Превышение</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @if (_onlyActual)
        {
            <tr>
                <td colspan="7"><button class="btn btn-link" @onclick="async _ => await ShowAllLimits()">Показать неактуальные</button></td>
            </tr>
        }

        @foreach (var calcLimit in AllLimits)
        {
            @if (selectedLimit?.Id != calcLimit.LimitId.ToString())
            {
                <tr style="@calcLimit.RowColorCSSStyle">
                    <td>@calcLimit.DatesRange</td>
                    <td>@calcLimit.Description</td>
                    <td>@calcLimit.LimitAmounth</td>
                    <td>@calcLimit.Spent</td>
                    <td>@calcLimit.Left</td>
                    <td>@calcLimit.Deficite</td>
                    <td><button @onclick="@(_ => EditLimit(calcLimit))" style="float:right" class="btn btn-sm btn-secondary" title="Редактировать"><span class="oi oi-pencil" aria-hidden="true"></span></button></td>
                </tr>
            }
            else
            {
                <tr>
                    <td colspan="7">
                        <EditForm Model="selectedLimit" OnValidSubmit="UpdateLimit">
                            <DataAnnotationsValidator />
                            <ValidationSummary />

                            <div class="form-row">
                                <div class="col-lg-2 col-md-6 col-sm-12 mb-2">
                                    <InputDate class="form-control" @bind-Value="selectedLimit.StartDate" />
                                </div>
                                <div class="col-lg-2 col-md-6 col-sm-12 mb-2">
                                    <InputDate class="form-control" @bind-Value="selectedLimit.EndDate" />
                                </div>
                                <div class="col-lg-4 col-md-12 col-sm-12 mb-2">
                                    <InputText class="form-control" @bind-Value="selectedLimit.Description" />
                                </div>
                                <div class="col-lg-2 col-md-4 col-sm-6 mb-2">
                                    <InputNumber class="form-control" step="0.01" @bind-Value="selectedLimit.LimitAmounth" />
                                </div>
                                <div class="col-lg-2 col-md-8 col-sm-6 mb-2">
                                    <div style="float:right">
                                        <button type="submit" class="btn btn-sm btn-success" title="Сохранить"><span class="oi oi-check" aria-hidden="true"></span></button>
                                        <button @onclick="DeleteLimit" class="btn btn-sm btn-danger" title="Удалить"><span class="oi oi-trash" aria-hidden="true"></span></button>
                                        <button @onclick="CancelEdit" class="btn btn-sm btn-secondary" title="Закрыть"><span class="oi oi-x" aria-hidden="true"></span></button>
                                    </div>
                                </div>
                            </div>
                        </EditForm>
                    </td>
                </tr>
            }

        }
    </tbody>
    <tfoot>
        <tr>
            <td colspan="7">
                <EditForm Model="newLimit" OnValidSubmit="AddNewLimit">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="form-row">
                        <div class="col-lg-2 col-md-6 col-sm-12 mb-2">
                            <InputDate class="form-control" @bind-Value="newLimit.StartDate" />
                        </div>
                        <div class="col-lg-2 col-md-6 col-sm-12 mb-2">
                            <InputDate class="form-control" @bind-Value="newLimit.EndDate" />
                        </div>
                        <div class="col-lg-4 col-md-12 col-sm-12 mb-2">
                            <InputText class="form-control" @bind-Value="newLimit.Description" />
                        </div>
                        <div class="col-lg-2 col-md-4 col-sm-6 mb-2">
                            <InputNumber class="form-control" step="0.01" @bind-Value="newLimit.LimitAmounth" />
                        </div>
                        <div class="col-lg-2 col-md-8 col-sm-6 mb-2">
                            <button type="submit" class="btn btn-success" style="float:right">Добавить</button>
                        </div>
                    </div>
                </EditForm>
            </td>
        </tr>
    </tfoot>
</table>

<p style="color: blue">*Лимиты с актуальным временным диапазоном</p>
<p style="color: red">*Превышенные лимиты</p>
<p style="color: indianred">*Превышенные лимиты с неактуальным временным диапазоном</p>

@code {

    private bool _onlyActual = true;

    private List<CalculatedLimit> AllLimits { get; set; } = new List<CalculatedLimit>();
    private LimitDto newLimit = new LimitDto();
    private LimitDto? selectedLimit;

    protected override async Task OnInitializedAsync()
    {
        AllLimits = await LimitsCalc.GetCalculatedLimits(_onlyActual);
    }

    private async Task ShowAllLimits()
    {
        _onlyActual = false;
        AllLimits = await LimitsCalc.GetCalculatedLimits(_onlyActual);
    }

    private async Task AddNewLimit()
    {
        if (newLimit.StartDate.Date > newLimit.EndDate.Date)
        {
            await JSRuntime.InvokeVoidAsync("alert", "Дата начала периода не может быть больше даты окончания периода");
            return;
        }

        var lim = await LimitsSvc.AddLimit(
            startDate: newLimit.StartDate,
            endDate: newLimit.EndDate,
            description: newLimit.Description ?? "empty",
            newLimit.LimitAmounth);

        var calcLim = await LimitsCalc.GetCalculatedLimit(lim);
        AllLimits.Add(calcLim);
        newLimit = new LimitDto();
    }

    private void EditLimit(CalculatedLimit limit)
    {
        selectedLimit = new LimitDto
        {
            Id = limit.LimitId.ToString(),
            Description = limit.Description,
            StartDate = limit.StartDate,
            EndDate = limit.EndDate,
            LimitAmounth = limit.LimitAmounthNum
        };
    }

    private void CancelEdit()
    {
        selectedLimit = null;
    }

    private async Task UpdateLimit()
    {
        if (selectedLimit == null) return;

        if (selectedLimit.StartDate.Date > selectedLimit.EndDate.Date)
        {
            await JSRuntime.InvokeVoidAsync("alert", "Дата начала периода не может быть больше даты окончания периода");
            return;
        }

        var limId = Guid.Parse(selectedLimit.Id ?? Guid.Empty.ToString());

        await LimitsSvc.UpdateLimit(
            limitId: limId,
            startDate: selectedLimit.StartDate,
            endDate: selectedLimit.EndDate,
            description: selectedLimit.Description ?? "empty",
            selectedLimit.LimitAmounth);

        var lim = (await LimitsSvc.GetLimits()).Single(l => l.Id == limId);
        var calcLim = await LimitsCalc.GetCalculatedLimit(lim);

        AllLimits.Remove(AllLimits.Single(l => l.LimitId == limId));
        AllLimits.Add(calcLim);

        selectedLimit = null;
    }

    public async Task DeleteLimit()
    {
        if (selectedLimit == null) return;

        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Удалить лимит?");
        if (!confirmed) return;

        var limId = Guid.Parse(selectedLimit.Id ?? Guid.Empty.ToString());
        await LimitsSvc.DeleteLimit(limId);
        AllLimits.Remove(AllLimits.Single(l => l.LimitId == limId));

        selectedLimit = null;
    }

}