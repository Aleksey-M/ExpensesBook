@page "/inyearpage"

@using ExpensesBook.Domain.Calculators

@inject YearExpensesCalculator YearExpCalc

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4 mb-4">
    <MudCard>
        <MudCardContent>
            <MudGrid>
                <MudItem xs="12" sm="4" md="2">
                    <MudSelect T="int" Label="Год" @bind-value="_year">
                        @foreach (int y in _allYears)
                        {
                            <MudSelectItem Value="@y">@y</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>

                <MudItem xs="12" sm="4" md="7">
                    <MudSelect T="ExpensesGroupingType" Label="Группировка" @bind-value="_viewType">
                        <MudSelectItem Value="ExpensesGroupingType.ByGroup">По группе</MudSelectItem>
                        <MudSelectItem Value="ExpensesGroupingType.ByCategory">По категории</MudSelectItem>
                    </MudSelect>
                </MudItem>

                <MudItem xs="12" sm="4" md="3">
                    <MudButton
                        Variant="Variant.Filled"
                        Class="mt-2"
                        Color="Color.Success"
                        StartIcon="@Icons.Material.Filled.TableChart"
                        OnClick="ShowTable">
                            Показать
                    </MudButton>
                </MudItem>
            </MudGrid>
        </MudCardContent>
    </MudCard>

    @if (_yearPivotTable is not null)
    {
            <MudCard Class="mt-5">
                <MudCardContent>
                    <MudTable
                        Items="_yearPivotTable.Rows"
                        Breakpoint="Breakpoint.None"
                        Striped="true"
                        MultiSelection="true"
                        SelectedItems="_selectedItems"
                        T="(string rowName, List<(string value, string percent)>)"
                        SelectedItemsChanged="items => OnSelectedChanged(items)"
                        FixedHeader="true">

                        <HeaderContent>
                            <MudTh>@_yearPivotTable.GroupingParameterName</MudTh>
                            @foreach (var m in _yearPivotTable.MonthsNames)
                            {
                                <MudTh Style="text-align:center">@m</MudTh>
                            }
                        </HeaderContent>

                        <RowTemplate>
                            <MudTh>@context.rowName</MudTh>

                            @foreach (var c in context.Item2)
                            {
                                <MudTd Style="text-align:center">@c.value <i style="color:darkgrey">@c.percent</i></MudTd>
                            }
                        </RowTemplate>
                    </MudTable>

                    <MudText Class="mt-4 mb-2" Color="Color.Warning">Расходы за год: @_yearPivotTable.Total</MudText>
                </MudCardContent>                
            </MudCard>

            <MudPaper Class="mt-3 mb-3">
                <MudChart
                    ChartOptions="Options"
                    ChartType="ChartType.Line"
                    ChartSeries="@Series"
                    XAxisLabels="@XAxisLabels"
                    Width="100%"
                    Height="350px">
                </MudChart>
            </MudPaper>               
    }
    else
    {
        <MudText Class="mt-4 mb-2" Color="Color.Warning">Нет данных</MudText>
    }
</MudContainer>

@code{

    private int _year;
    private ExpensesGroupingType _viewType = ExpensesGroupingType.ByGroup;
    private List<int> _allYears = new();
    private HashSet<(string rowName, List<(string value, string percent)>)> _selectedItems = new();

    private YearPivotTable? _yearPivotTable;

    private List<ChartSeries> Series = new();
    private string[] XAxisLabels = Array.Empty<string>();
    private ChartOptions Options = new ChartOptions { YAxisTicks = 10000 };

    private void UpdateChart()
    {
        if (_yearPivotTable is null) return;

        XAxisLabels = _yearPivotTable.MonthsNames.ToArray();

        Series = _selectedItems
            .Where(i => i.rowName != "За месяц")
            .Select(r =>
            new ChartSeries
            {
                Name = r.rowName,
                Data = r.Item2.Select(i => double.TryParse(i.value, out _) ? double.Parse(i.value) : 0).ToArray()
            })
            .ToList();

        double max = 0;

        foreach (var s in _selectedItems.Where(i => i.rowName != "За месяц"))
        {
            var m = s.Item2.Select(i => double.TryParse(i.value, out _) ? double.Parse(i.value) : 0).Max();
            if (m > max) max = m;
        }

        Options.YAxisTicks = max switch
        {
            0 => 10,
            < 1000 => 200,
            < 2000 => 250,
            < 3000 => 300,
            < 5000 => 500,
            < 10_000 => 1000,
            _ => 20_000
        };
    }

    private void OnSelectedChanged(HashSet<(string rowName, List<(string value, string percent)>)> items)
    {
        UpdateChart();
    }

    private async Task ShowTable()
    {
        _yearPivotTable = await YearExpCalc.GetYearExpenses(_year, _viewType);

        if (_yearPivotTable is not null)
        {
            _selectedItems = new(_yearPivotTable.Rows);

            UpdateChart();

            var total = _yearPivotTable.MonthsTotals.OrderBy(t => t.month).Select(t => (t.total, t.percent)).ToList();
            _yearPivotTable.Rows.Add(("За месяц", total));
        }
    }

    protected override async Task OnInitializedAsync()
    {
        _allYears = await YearExpCalc.GetYears();

        var y = DateTimeOffset.Now.Year;

        if (_allYears.Contains(y))
        {
            _year = y;
        }
    }
}